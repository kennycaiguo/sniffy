#!/usr/bin/env python2
# Copyright 2011 Tom Vincent <http://tlvince.com/contact/>

"""Sniff media hosting websites for Flash-free consumption."""

import re
import logging
import subprocess
import argparse
import os
import pwd
import grp
import sys

import pcap
import quvi

# XXX: Python equivelant of whereis?
libquvi_scripts = os.path.join("/usr", "share", "libquvi-scripts", "lua", "website")

def drop_privileges(uid_name="nobody", gid_name="nobody"):
    """Drop root privileges.

    From: http://stackoverflow.com/q/2699907/2699996#2699996

    uid_name - The user identifier String to switch to.
    gid_name - The corresponding group identifier String.
    """
    if os.getuid() != 0:
        # We're not root so, like, whatever dude
        return

    # Get the uid/gid from the name
    running_uid = pwd.getpwnam(uid_name).pw_uid
    running_gid = grp.getgrnam(gid_name).gr_gid

    # Remove group privileges
    os.setgroups([])

    # Try setting the new uid/gid
    os.setgid(running_gid)
    os.setuid(running_uid)

    # Ensure a very conservative umask
    old_umask = os.umask(077)

def parse_arguments():
    """Parse the command-line arguments.

    Returns a populated argument namespace.
    """
    # List of logging levels
    log_levels = [k for k in logging.__dict__["_levelNames"].keys() if not
            isinstance(k, int)]

    parser = argparse.ArgumentParser(description=__doc__.split("\n")[0],
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument("-l", "--log-level", default="WARN", choices=log_levels,
        help="logging level")
    parser.add_argument("-f", "--log-file", help="logging file name")
    parser.add_argument("-m", "--media-player", default="mplayer -fs",
        help="media player command")
    parser.add_argument("-q", "--quality", default="best",
        choices=["best", "default"], help="quvi media quality format")
    parser.add_argument("-i", "--interface", default="eth0",
        help="network interface name")
    return parser.parse_args()

def quvi_hosts(websites):
    """Returns a list of hosts supported by libquvi-scripts.

    websites    - A list of libquvi-scripts websites.
    """
    hosts = []
    domain = re.compile("r.domain\s+=\s+['|\"](.*?)['|\"]")

    # XXX: colleghumor.lua
    domains = re.compile(
        "local\sdomains(\s+)?=\s+{['|\"](.*?)['|\"],\s+['|\"](.*?)['|\"]}")

    for website in websites:
        with open(os.path.join(libquvi_scripts, website)) as f:
            site = f.read()
        try:
            matches = domain.search(site).groups()
        except AttributeError:
            matches = domains.search(site).groups()
        for i in matches:
            if i != None:
                hosts.append(i.replace("%", "").replace("w+", "com"))
    return hosts

def quvi_websites():
    """Returns a list of libquvi-scripts websites."""
    websites = []
    for f in os.listdir(libquvi_scripts):
        if os.path.splitext(f)[1] == ".lua":
            websites.append(f)
    return websites

def parse_url(url):
    """Return a dictonary of media properties.

    url - A media webpage URL (in the form http://...)
    """
    q = quvi.Quvi()
    q.parse(url)
    return q.get_properties()

def handler(host, path, known_hosts, player, quality):
    """Parse known media hosting URLs and pass to a player.

    host        - A website hostname (e.g. youtube.com).
    path        - The path component of a URL (e.g. /watch?v=0gzA6Xzbh1k).
    known_hosts - A list of hosts supported by the URL parser.
    player      - The command line string of the player.
    quality     - A quvi quality format (one of "best" or "default")
    """
    # Ignore paths that contain:
    blacklist = [".jpg", ".png", ".gif", ".css", ".woff", ".js"]

    url = "http://{0}{1}".format(host, path)

    # Ignore root paths
    if len(path) == 1:
        return

    # Ignore paths containing a blacklisted substring
    for b in blacklist:
        if b in path:
            logging.debug("blacklisted {0}".format(url))
            return

    logging.debug("handling {0}".format(url))

    # Strip leading www
    if host.startswith("www."):
        host = host[4:]

    if host in known_hosts:
        try:
            if quality == "best":
                media_props = quvi.get_properties_best_quality(url)
            else:
                media_props = parse_url(url)
            cmd = player.split() + [media_props["mediaurl"]]

            logging.info("playing '{0}' from {1}".format(
                media_props["pagetitle"], media_props["hostid"]))
            # Output parser/player info if in debug
            if logging.getLogger().level is 10:
                subprocess.Popen(cmd).wait()
            else:
                # Silence the process
                # See: http://stackoverflow.com/q/1244723
                fh = open(os.devnull, "w")
                subprocess.Popen(cmd, stdout=fh, stderr=fh).wait()
                fh.close()
        except quvi.QuviError:
            # A next media error (code 65) occurs for links like
            #
            #   http://vimeo.com/moogaloop/play/clip:30606208/...
            #
            # (they begin with a link the looks as though it'll be supported but
            # is not). Ignore the exception.
            pass

def main():
    """Start execution of sniffy."""
    try:
        # Parse the CLI arguments
        args = parse_arguments()

        # Setup a packet capturer (needs root permissions)
        pc = pcap.pcap(name=args.interface, snaplen=1500)
    except OSError as e:
        sys.stderr.write("{0}\n".format(str(e)))
        sys.exit(1)

    try:
        # Drop root permissions ASAP
        # XXX: ALSA requires audio group
        drop_privileges("nobody", "audio")

        # Setup logging
        logging.basicConfig(level=args.log_level, filename=args.log_file,
            format="{name}: %(levelname)s: %(message)s".format(
                name=os.path.basename(__file__)))

        # Get the supported sites
        websites = quvi_websites()
        known_hosts = quvi_hosts(websites)

        # Listen for GET requests
        pattern = re.compile("GET (.*) HTTP.*\nHost: ([^\r\n]*)")

        # Listen on HTTP traffic only
        pc.setfilter("tcp and dst port 80")

        # Check every packet and forward handler if it looks interesting
        for timestamp, packet in pc:
            regex = pattern.search(packet)
            if regex:
                handler(regex.group(2), regex.group(1), known_hosts,
                        args.media_player, args.quality)
    except KeyboardInterrupt:
        pass
    except Exception as e:
        logging.error(e)

if __name__ == "__main__":
    main()
